name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check commit messages
      run: |
        npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.sha }} --verbose
      continue-on-error: true
    
    - name: Run all tests
      run: npm test
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
    
    - name: Build check
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
    
    - name: Check for breaking changes
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const breakingFiles = files.filter(file => 
            file.filename.includes('migration') || 
            file.filename.includes('schema')
          );
          
          if (breakingFiles.length > 0) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Breaking Change Detection**\n\nThis PR contains database migrations or schema changes. Please ensure:\n- [ ] Migration is backward compatible\n- [ ] RLS policies are updated\n- [ ] Tests cover new schema\n- [ ] Documentation is updated'
            });
          }
    
    - name: Comment PR with test summary
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const testStatus = '${{ job.status }}' === 'success' ? '✅' : '❌';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${testStatus} **Test Summary**\n\nAll automated checks have ${job.status === 'success' ? 'passed' : 'failed'}.`
          })
